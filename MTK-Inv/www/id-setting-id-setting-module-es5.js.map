{"version":3,"sources":["webpack:///src/app/id-setting/id-setting.page.html","webpack:///src/app/id-setting/id-setting-routing.module.ts","webpack:///src/app/id-setting/id-setting.module.ts","webpack:///src/app/id-setting/id-setting.page.scss","webpack:///src/app/id-setting/id-setting.page.ts"],"names":["routes","path","component","IdSettingPageRoutingModule","imports","forChild","exports","IdSettingPageModule","declarations","IdSettingPage","fb","idSettingService","lookupService","alertController","editMode","page","count","tableSize","tableSizes","currentIndex","regform","group","voucherTypeId","required","prefix","length","suffix","currentId","getLookUpByType","subscribe","result","vouchertype","allIdSetting","getAllIdSetting","idSettingList","lengthOfIdSetting","valid","IdSettingId","create","value","updateIdSetting","reset","presentAlert","message","cssClass","header","buttons","alert","present","item","slidingItem","id","get","setValue","presentAlertConfirm","text","role","handler","blah","console","log","removeIdSetting","listOfIdSetting","AlertInternet","error","event","getIdSetting","target","selector","template"],"mappings":"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","file":"id-setting-id-setting-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\" >\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <div>\\n      <ion-item color=\\\"primary\\\" lines=\\\"none\\\">\\n      <ion-label>Id Setting</ion-label>\\n      <ion-badge color=\\\"success\\\" slot=\\\"end\\\">{{lengthOfIdSetting}}</ion-badge>\\n      </ion-item>\\n    </div>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-list>\\n    <form [formGroup]=\\\"regform\\\">\\n      <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Prefix</ion-label>\\n              <ion-input formControlName=\\\"prefix\\\" ></ion-input>\\n              <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('prefix').valid && regform.get('prefix').touched\\\" > This field is required! </small> \\n            </ion-item>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Length</ion-label>\\n              <ion-input formControlName=\\\"length\\\"></ion-input>\\n               <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('length').valid && regform.get('length').touched\\\" > This field is required! </small> \\n            </ion-item>\\n          </div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-6\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Suffix</ion-label>\\n              <ion-input formControlName=\\\"suffix\\\"></ion-input>\\n              <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('suffix').valid && regform.get('suffix').touched\\\" > This field is required! </small> \\n            </ion-item>\\n          </div>\\n          <div class=\\\"col-md-6\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Current Id</ion-label>\\n              <ion-input formControlName=\\\"currentId\\\"></ion-input>\\n              <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('currentId').valid && regform.get('currentId').touched\\\" > This field is required! </small> \\n            </ion-item>\\n          </div>\\n        </div>\\n      </div>\\n     <div style=\\\"text-align: center; margin: auto;\\\">\\n      <ion-button id=\\\"add items\\\" (click)=\\\"Save()\\\" > \\n        <ion-icon slot=\\\"start\\\" name=\\\"add-circle-outline\\\"></ion-icon>\\n        {{editMode?'Update Id Setting':'Add Id Setting'}}</ion-button>\\n    </div>\\n  </form>\\n  </ion-list>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-8\\\">\\n      <div class=\\\"form-group\\\">\\n       <ion-searchbar showCancelButton=\\\"never\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Search\\\"></ion-searchbar>\\n        </div>\\n    </div>\\n    <div class=\\\"col-md-4\\\">\\n        <div class=\\\"form-group\\\">\\n          <div class=\\\"d-flex flex-row-reverse bd-highlight mb-2\\\">\\n            <div class=\\\"p-2 bd-highlight\\\">\\n              <select (change)=\\\"onTableSizeChange($event)\\\" class=\\\"custom-select\\\">\\n                <option *ngFor=\\\"let size of tableSizes\\\" [ngValue]=\\\"size\\\">\\n                  {{ size }}\\n                </option>\\n              </select>\\n            </div>\\n          </div>\\n        </div>\\n    </div>\\n  </div>\\n  \\n  <table class=\\\"table\\\" >\\n    <colgroup>\\n      <col width=\\\"15%\\\">\\n      <col width=\\\"15%\\\">\\n      <col width=\\\"15%\\\">\\n      <col width=\\\"15%\\\">\\n    </colgroup>\\n    <thead>\\n      <tr>\\n        <th scope=\\\"col\\\">#</th>\\n        <th scope=\\\"col\\\">Preffix</th>\\n        <th scope=\\\"col\\\">Suffix</th>\\n        <th scope=\\\"col\\\">Length</th>\\n        <th scope=\\\"col\\\">Actions</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngIf=\\\"idSettingList?.length==0\\\" >\\n        <td class=\\\"font-italic text-center\\\" colspan=\\\"5\\\">\\n          No  item selected for this order.\\n        </td>\\n      </tr>\\n      <tr *ngFor=\\\"let item of idSettingList|filter:searchText  | paginate : {\\n                                              itemsPerPage: tableSize,\\n                                              currentPage: page,\\n                                              totalItems: count\\n                                            };\\n                                      let i = index\\\" [class.active]=\\\"i == currentIndex\\\">\\n        <th scope=\\\"row\\\">{{i + 1}}</th>\\n        <td>{{item.prefix}}</td>\\n        <td>{{item.suffix}}</td>\\n        <td>{{item.length}}</td>\\n        <td (click)=\\\"Edit(item)\\\"><ion-icon  name=\\\"create\\\" slot=\\\"icon-only\\\"></ion-icon></td>\\n        <td (click)=\\\"delete(item)\\\"><ion-icon  name=\\\"trash\\\" slot=\\\"icon-only\\\"></ion-icon></td>\\n      </tr>\\n    </tbody>\\n  \\n  </table>\\n  <!-- <div *ngIf=\\\"(idSettingList | filter: searchText).length === 0\\\">\\n    <div>error</div>\\n    <div >0 results</div>\\n    <div>No matching this search input data!!!</div>\\n  </div> -->\\n  <div class=\\\"d-flex justify-content-center\\\">\\n    <pagination-controls \\n      responsive=\\\"true\\\" \\n      previousLabel=\\\"Prev\\\" \\n      nextLabel=\\\"Next\\\" \\n      (pageChange)=\\\"onTableDataChange($event)\\\">\\n    </pagination-controls>\\n  </div>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IdSettingPage } from './id-setting.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: IdSettingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class IdSettingPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { IdSettingPageRoutingModule } from './id-setting-routing.module';\n\nimport { IdSettingPage } from './id-setting.page';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { NgxPaginationModule } from 'ngx-pagination';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    IdSettingPageRoutingModule,\n    Ng2SearchPipeModule,\n    NgxPaginationModule\n  ],\n  declarations: [IdSettingPage]\n})\nexport class IdSettingPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2lkLXNldHRpbmcvaWQtc2V0dGluZy5wYWdlLnNjc3MifQ== */\";","import { LookupService } from './../Service/lookup.service';\nimport { IdSetting, Lookup } from './../../Tabels/tabels-list';\nimport { IdSettingService } from '../Service/id-setting.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AlertController, IonItemSliding } from '@ionic/angular';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-id-setting',\n  templateUrl: './id-setting.page.html',\n  styleUrls: ['./id-setting.page.scss'],\n})\nexport class IdSettingPage implements OnInit {\n  regform: any;\n  IdSettingId: string;\n  editMode: boolean=false;\n  vouchertype:Lookup[];\n  idSettingList:IdSetting[];\n  idSettingList$:Observable<IdSetting[]>\n  searchText:string;\n  //paging declaration\n  page = 1;\n  count = 0;\n  tableSize = 3;\n  tableSizes = [3, 6, 9, 12];\n  currentIndex = -1;\n  listOfIdSetting: IdSetting[];\n  lengthOfIdSetting: number;\n  constructor(private fb : FormBuilder, private idSettingService:IdSettingService,\n    private lookupService:LookupService,\n    private alertController: AlertController) { }\n  ngOnInit() {\n    this.regform =this.fb.group({\n      voucherTypeId:['',Validators.required],\n      prefix:['',Validators.required],\n      length:[''],\n      suffix:[''],\n      currentId:['']\n    });\n    this.lookupService.getLookUpByType('HuXhQ8ChpLL3DbXQR6yh').subscribe(result=>{\n      this.vouchertype=result;\n     });\n     this.allIdSetting();\n  }\n  allIdSetting()\n  {\n   this.idSettingService.getAllIdSetting().subscribe(result=>{\n    \n     this.idSettingList=result;\n     this.lengthOfIdSetting= this.idSettingList.length;\n   // console.log(this.lengthOfIdSetting);\n   });\n  }\n  \n  Save()\n  {\n    if(this.regform.valid)\n    {\n      if(!this.IdSettingId)\n      {\n        this.idSettingService.create(this.regform.value);\n      }\n      else{\n       this.idSettingService.updateIdSetting(this.regform.value,this.IdSettingId)\n      }\n      this.regform.reset();\n      this.IdSettingId=\"\";\n      this.presentAlert(\"Save Sucessfully\");\n    }\n    else{\n     this.presentAlert(\"Please enter all fields\");\n    }\n  }\n  async presentAlert(message) {\n   const alert = await this.alertController.create({\n     cssClass: 'my-custom-class',\n     header: 'Id Setting',\n     // subHeader: 'Subtitle',\n     message: message,\n     buttons: ['OK']\n   });\n   await alert.present();\n }\n Edit(item :IdSetting,slidingItem: IonItemSliding )\n {\n   this.editMode=true;\n   this.IdSettingId=item.id;\n   this.regform.get(\"voucherTypeId\").setValue(item.voucherTypeId);\n   this.regform.get(\"length\").setValue(item.length);\n   this.regform.get(\"prefix\").setValue(item.prefix);\n   this.regform.get(\"suffix\").setValue(item.suffix);\n   this.regform.get(\"currentId\").setValue(item.currentId);\n   //slidingItem.close();\n }\n delete(item :IdSetting,slidingItem: IonItemSliding )\n    {\n      this.presentAlertConfirm(item)\n    }\n    async presentAlertConfirm(item :IdSetting) {\n      const alert = await this.alertController.create({\n        header: 'Confirm!',\n        message: '<strong>Are you sure you want delete?</strong>',\n        buttons: [\n          {\n            text: 'Cancel',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: (blah) => {\n              console.log('Confirm Cancel: blah');\n            }\n          }, {\n            text: 'OK',\n            handler: () => {\n            this.idSettingService.removeIdSetting(item.id);\n           this.regform.reset();\n           this.IdSettingId=null;\n            }\n          }\n        ]\n      });\n  \n      await alert.present();\n    }\n    getIdSetting(){\n      try{\n       this.idSettingService.getAllIdSetting().subscribe(result=>{ \n       if(result.length>0){\n         this.listOfIdSetting=result;\n       }\n       else\n       {\n       this.AlertInternet();\n       }\n       });\n      }\n     catch(error){\n       console.log(error);\n     }\n    }\n    async AlertInternet(){\n     const alert = await this.alertController.create({\n       cssClass:'my-custom-class',\n       header:'Internet',\n       message:'Please trun on data or wifi',\n       buttons:['ok']\n     });\n     await alert.present();\n    }\n     //paging function\n  onTableDataChange(event){\n    this.page = event;\n    this.getIdSetting();\n  }  \n  onTableSizeChange(event): void {\n    this.tableSize = event.target.value;\n    this.page = 1;\n    this.getIdSetting();\n  }\n \n}\n"]}